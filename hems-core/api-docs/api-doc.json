{
  "openapi": "3.1.0",
  "info": {
    "title": "HEMS-Core API",
    "description": "API documentation for the HEMS project as part of Convergence initiative.",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    },
    "version": "1.0"
  },
  "paths": {
    "/healthz": {
      "get": {
        "description": "Health check endpoint",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "Health check OK"
          }
        }
      }
    },
    "/houses/{id}": {
      "get": {
        "tags": [
          "House"
        ],
        "description": "Get house details",
        "operationId": "get_by_id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "House details",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "House not found"
          }
        }
      },
      "post": {
        "tags": [
          "House"
        ],
        "description": "Compose a house",
        "operationId": "compose",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "House composed successfully"
          },
          "500": {
            "description": "Error composing house"
          }
        }
      },
      "delete": {
        "tags": [
          "House"
        ],
        "description": "Reset the house simulation",
        "operationId": "reset",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "House reset successfully"
          },
          "500": {
            "description": "Error resetting house"
          }
        }
      }
    },
    "/houses/{id}/battery/{id}": {
      "get": {
        "tags": [
          "Battery"
        ],
        "description": "Get battery properties.",
        "operationId": "get_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "battery_id",
            "in": "path",
            "description": "Battery ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get battery properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatteryInfo"
                }
              }
            }
          },
          "400": {
            "description": "Invalid battery ID"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Battery"
        ],
        "description": "Add a new battery entity.",
        "operationId": "add_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the battery entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatteryEntityParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Battery added successfully"
          },
          "500": {
            "description": "Error adding battery"
          }
        }
      },
      "delete": {
        "tags": [
          "Battery"
        ],
        "description": "Remove a battery entity from the house.",
        "operationId": "remove_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the battery entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Battery removed successfully"
          },
          "500": {
            "description": "Error removing battery"
          }
        }
      }
    },
    "/houses/{id}/battery/{id}/target": {
      "get": {
        "tags": [
          "Battery"
        ],
        "description": "Unset target SoC",
        "operationId": "set_target_soc_none",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "battery_id",
            "in": "path",
            "description": "Battery ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unset target SOC",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatteryInfo"
                }
              }
            }
          },
          "500": {
            "description": "Error unsetting target SOC"
          }
        }
      }
    },
    "/houses/{id}/battery/{id}/target/{soc}": {
      "get": {
        "tags": [
          "Battery"
        ],
        "description": "Set battery target SoC",
        "operationId": "set_target_soc",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "battery_id",
            "in": "path",
            "description": "Battery ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "soc",
            "in": "path",
            "description": "Target state of charge",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set target SOC",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatteryInfo"
                }
              }
            }
          },
          "500": {
            "description": "Error setting target SOC"
          }
        }
      }
    },
    "/houses/{id}/config": {
      "post": {
        "tags": [
          "House"
        ],
        "description": "Set the house configuration",
        "operationId": "set_config",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "House config set successfully"
          },
          "500": {
            "description": "Error setting house config"
          }
        }
      }
    },
    "/houses/{id}/entities": {
      "get": {
        "tags": [
          "House"
        ],
        "description": "List all entities in the house",
        "operationId": "list_entities",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "List of entities",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Error getting entities"
          }
        }
      }
    },
    "/houses/{id}/entity": {
      "post": {
        "tags": [
          "Entity"
        ],
        "description": "Add a new entity.",
        "operationId": "add_entity",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EntityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entity added successfully"
          },
          "500": {
            "description": "Failed to add entity"
          }
        }
      }
    },
    "/houses/{id}/entity/{entity_name}/consumption": {
      "get": {
        "tags": [
          "Entity"
        ],
        "description": "Get entity consumption.",
        "operationId": "get_entity_consumption",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get entity consumption",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityRequest"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get entity consumption"
          }
        }
      }
    },
    "/houses/{id}/load": {
      "post": {
        "tags": [
          "House"
        ],
        "description": "Load the house simulation",
        "operationId": "load",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "House loaded successfully"
          },
          "500": {
            "description": "Error loading house"
          }
        }
      }
    },
    "/houses/{id}/meters/{id}": {
      "get": {
        "tags": [
          "Meter"
        ],
        "description": "Get properties of a meter device",
        "operationId": "get_by_id",
        "responses": {
          "200": {
            "description": "Get meter information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeterInfo"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get meter information"
          }
        }
      }
    },
    "/houses/{id}/meters/{id}/export": {
      "get": {
        "tags": [
          "Meter"
        ],
        "description": "Get current energy export",
        "operationId": "get_export",
        "responses": {
          "200": {
            "description": "Get energy export",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get energy export"
          }
        }
      }
    },
    "/houses/{id}/meters/{id}/import": {
      "get": {
        "tags": [
          "Meter"
        ],
        "description": "Get current energy import",
        "operationId": "get_import",
        "responses": {
          "200": {
            "description": "Get energy import",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "number",
                  "format": "double"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get energy import"
          }
        }
      }
    },
    "/houses/{id}/pause": {
      "post": {
        "tags": [
          "House"
        ],
        "description": "Pause the house simulation",
        "operationId": "pause_simulation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "House paused successfully"
          },
          "500": {
            "description": "Error pausing house"
          }
        }
      }
    },
    "/houses/{id}/resume": {
      "post": {
        "tags": [
          "House"
        ],
        "description": "Resume the house simulation",
        "operationId": "resume_simulation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "House resumed successfully"
          },
          "500": {
            "description": "Error resuming house"
          }
        }
      }
    },
    "/houses/{id}/solar/{id}": {
      "get": {
        "tags": [
          "Solar"
        ],
        "description": "Get solar information.",
        "operationId": "get_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "solar_id",
            "in": "path",
            "description": "Solar ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get solar information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolarInfo"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get solar information"
          }
        }
      },
      "post": {
        "tags": [
          "Solar"
        ],
        "description": "Add a solar entity.",
        "operationId": "add_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the solar entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SolarEntityParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Add solar entity successfully"
          },
          "500": {
            "description": "Failed to add solar entity"
          }
        }
      },
      "delete": {
        "tags": [
          "Solar"
        ],
        "description": "Remove a solar entity.",
        "operationId": "remove_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the solar entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Remove solar entity successfully"
          },
          "500": {
            "description": "Failed to remove solar entity"
          }
        }
      }
    },
    "/houses/{id}/solar/{id}/toggle/{state}": {
      "get": {
        "tags": [
          "Solar"
        ],
        "description": "Get solar information.",
        "operationId": "toggle",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "solar_id",
            "in": "path",
            "description": "Solar ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "state",
            "in": "path",
            "description": "State to toggle to",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Toggle solar state successfully"
          },
          "500": {
            "description": "Failed to toggle solar state"
          }
        }
      }
    },
    "/houses/{id}/stop": {
      "post": {
        "tags": [
          "House"
        ],
        "description": "Stop the house simulation",
        "operationId": "stop_simulation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "House stopped successfully"
          },
          "500": {
            "description": "Error stopping house"
          }
        }
      }
    },
    "/houses/{id}/thermal/{id}": {
      "get": {
        "tags": [
          "Thermal"
        ],
        "description": "Get properties of a thermal device",
        "operationId": "get_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "thermal_id",
            "in": "path",
            "description": "Thermal ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get thermal information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ThermalInfo"
                }
              }
            }
          },
          "500": {
            "description": "Failed to get thermal information"
          }
        }
      }
    },
    "/houses/{id}/thermal/{id}/target/{temp}": {
      "post": {
        "tags": [
          "Thermal"
        ],
        "description": "Set target temperature for a thermal device",
        "operationId": "set_target_temp",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "thermal_id",
            "in": "path",
            "description": "Thermal ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "temp",
            "in": "path",
            "description": "Target temperature",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set target temperature successfully"
          },
          "500": {
            "description": "Failed to set target temperature"
          }
        }
      }
    },
    "/houses/{id}/time": {
      "get": {
        "tags": [
          "House"
        ],
        "description": "Get the current time of the house",
        "operationId": "get_time",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Current time",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Error getting time"
          }
        }
      },
      "post": {
        "tags": [
          "House"
        ],
        "description": "Set the house time",
        "operationId": "set_time",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Time"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "House time set successfully"
          },
          "500": {
            "description": "Error setting house time"
          }
        }
      }
    },
    "/houses/{id}/timeshifters/{entity_name}": {
      "get": {
        "tags": [
          "Timeshifters"
        ],
        "description": "Get timeshifter properties.",
        "operationId": "get_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the timeshifter entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get timeshifter properties",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceStatus"
                }
              }
            }
          },
          "400": {
            "description": "Invalid entity name"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Timeshifters"
        ],
        "description": "Add a new timeshifter entity.",
        "operationId": "add_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the timeshifter entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeShifterEntityParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully added timeshifter entity",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Timeshifters"
        ],
        "description": "Remove a timeshifter entity from the house.",
        "operationId": "remove_by_id",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the timeshifter entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully removed timeshifter entity",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/houses/{id}/timeshifters/{entity_name}/job": {
      "post": {
        "tags": [
          "Timeshifters"
        ],
        "description": "Schedule a job for a timeshifter entity",
        "operationId": "schedule_job",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the timeshifter entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully scheduled job for timeshifter entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Job"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/houses/{id}/timeshifters/{entity_name}/job/{id}": {
      "delete": {
        "tags": [
          "Timeshifters"
        ],
        "description": "Cancel a scheduled job for a timeshifter entity",
        "operationId": "cancel_job",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the timeshifter entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "job_id",
            "in": "path",
            "description": "Job ID to cancel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully scheduled job for timeshifter entity",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/houses/{id}/timeshifters/{entity_name}/shutdown": {
      "post": {
        "tags": [
          "Timeshifters"
        ],
        "description": "Force shutdown timeshifter entity immediately, potentially canceling and discarding any active jobs.",
        "operationId": "force_shutdown",
        "parameters": [
          {
            "name": "house_id",
            "in": "path",
            "description": "House ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 0
            }
          },
          {
            "name": "entity_name",
            "in": "path",
            "description": "Name of the timeshifter entity",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully shut down timeshifter entity",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BatteryEntityParams": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "BatteryInfo": {
        "type": "object",
        "required": [
          "capacity",
          "max_charge",
          "max_discharge",
          "state_of_charge",
          "status",
          "consumption"
        ],
        "properties": {
          "capacity": {
            "type": "number",
            "format": "double",
            "description": "Current battery capacity in Wh"
          },
          "consumption": {
            "type": "number",
            "format": "double",
            "description": "Current electricity consumption in W"
          },
          "max_charge": {
            "type": "number",
            "format": "double",
            "description": "Maximum charging power in W"
          },
          "max_discharge": {
            "type": "number",
            "format": "double",
            "description": "Maximum discharging power in W"
          },
          "state_of_charge": {
            "type": "number",
            "format": "double",
            "description": "Current state of charge in percentage"
          },
          "status": {
            "$ref": "#/components/schemas/BatteryStatus",
            "description": "Current battery status (charging, discharging, idle)"
          },
          "target_soc": {
            "type": [
              "number",
              "null"
            ],
            "format": "double",
            "description": "Target state of charge in percentage"
          }
        }
      },
      "BatteryStatus": {
        "type": "string",
        "enum": [
          "Charging",
          "Discharging",
          "Idle"
        ]
      },
      "DeviceStatus": {
        "type": "object",
        "required": [
          "house_id",
          "entity_name",
          "is_active",
          "progress",
          "active_job_idx",
          "scheduled_jobs",
          "consumption",
          "profile"
        ],
        "properties": {
          "active_job": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "$ref": "#/components/schemas/Job",
                "description": "The currently active job, if any"
              }
            ]
          },
          "active_job_idx": {
            "type": "integer",
            "format": "int32",
            "description": "The index of the currently active job"
          },
          "consumption": {
            "$ref": "#/components/schemas/Measurement",
            "description": "The current electricity consumption of the timeshifter"
          },
          "entity_name": {
            "type": "string",
            "description": "Name of the timeshifter entity"
          },
          "house_id": {
            "type": "integer",
            "format": "int32",
            "description": "House ID",
            "minimum": 0
          },
          "is_active": {
            "type": "boolean",
            "description": "Indicates if the timeshifter is active"
          },
          "profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalComplex"
            },
            "description": "The device profile of the timeshifter as a list of complex numbers"
          },
          "progress": {
            "type": "number",
            "format": "double",
            "description": "The progress of the current job as a percentage",
            "maximum": 100,
            "minimum": 0
          },
          "scheduled_jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Job"
            },
            "description": "The list of scheduled jobs"
          }
        }
      },
      "EntityRequest": {
        "type": "object",
        "required": [
          "entity_id",
          "consumption"
        ],
        "properties": {
          "consumption": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          }
        }
      },
      "InternalComplex": {
        "type": "object",
        "required": [
          "re",
          "im"
        ],
        "properties": {
          "im": {
            "type": "number",
            "format": "double"
          },
          "re": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "Job": {
        "type": "object",
        "required": [
          "startTime",
          "endTime"
        ],
        "properties": {
          "endTime": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "startTime": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "Measurement": {
        "type": "object",
        "required": [
          "value",
          "unit"
        ],
        "properties": {
          "unit": {
            "type": "string"
          },
          "value": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "MeterInfo": {
        "type": "object",
        "required": [
          "house_id",
          "meter_id",
          "total_import",
          "total_export"
        ],
        "properties": {
          "current_export": {
            "type": [
              "number",
              "null"
            ],
            "format": "double",
            "description": "Current energy export"
          },
          "current_import": {
            "type": [
              "number",
              "null"
            ],
            "format": "double",
            "description": "Current energy import"
          },
          "house_id": {
            "type": "integer",
            "format": "int32",
            "description": "House ID",
            "minimum": 0
          },
          "meter_id": {
            "type": "integer",
            "format": "int32",
            "description": "Meter ID",
            "minimum": 0
          },
          "total_export": {
            "type": "number",
            "format": "double",
            "description": "Total energy exported"
          },
          "total_import": {
            "type": "number",
            "format": "double",
            "description": "Total energy imported"
          }
        }
      },
      "ScheduleJob": {
        "type": "object",
        "required": [
          "delay",
          "duration"
        ],
        "properties": {
          "delay": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "SimConfig": {
        "type": "object",
        "required": [
          "timeDelayBase",
          "timeBase",
          "timeOffset",
          "timeZone",
          "intervals",
          "startTime",
          "database",
          "dataPrefix",
          "clearDB",
          "extendedLogging",
          "logDevices",
          "logFlow",
          "enablePersistence",
          "weatherFile",
          "irradianceFile",
          "ventilationFile",
          "gainFile",
          "dhwFile",
          "houseNum",
          "useIslanding",
          "photoVoltaicSettings",
          "batterySettings",
          "heatingSettings",
          "useFillMethod",
          "usePP",
          "ctrlTimeBase",
          "thermostatStartTimes",
          "thermostatSetpoints"
        ],
        "properties": {
          "batterySettings": {
            "type": "string"
          },
          "clearDB": {
            "type": "boolean"
          },
          "ctrlTimeBase": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "dataPrefix": {
            "type": "string"
          },
          "database": {
            "type": "string"
          },
          "dhwFile": {
            "type": "string"
          },
          "enablePersistence": {
            "type": "boolean"
          },
          "extendedLogging": {
            "type": "boolean"
          },
          "gainFile": {
            "type": "string"
          },
          "heatingSettings": {
            "type": "string"
          },
          "houseNum": {
            "type": "integer",
            "format": "int32",
            "minimum": 0
          },
          "intervals": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "irradianceFile": {
            "type": "string"
          },
          "logDevices": {
            "type": "boolean"
          },
          "logFlow": {
            "type": "boolean"
          },
          "photoVoltaicSettings": {
            "type": "string"
          },
          "startTime": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "thermostatSetpoints": {
            "type": "string"
          },
          "thermostatStartTimes": {
            "type": "string"
          },
          "timeBase": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "timeDelayBase": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          },
          "timeOffset": {
            "type": "integer",
            "format": "int64"
          },
          "timeZone": {
            "type": "string"
          },
          "useFillMethod": {
            "type": "boolean"
          },
          "useIslanding": {
            "type": "boolean"
          },
          "usePP": {
            "type": "boolean"
          },
          "ventilationFile": {
            "type": "string"
          },
          "weatherFile": {
            "type": "string"
          }
        }
      },
      "SolarEntityParams": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "SolarInfo": {
        "type": "object",
        "required": [
          "consumption"
        ],
        "properties": {
          "consumption": {
            "type": "number",
            "format": "double",
            "description": "Current electricity consumption (can be negative to indicate generation)"
          }
        }
      },
      "ThermalInfo": {
        "type": "object",
        "required": [
          "current_temperature",
          "target_temperature",
          "heating_power",
          "consumption"
        ],
        "properties": {
          "consumption": {
            "type": "number",
            "format": "double",
            "description": "Heat consumption"
          },
          "current_temperature": {
            "type": "number",
            "format": "double",
            "description": "Current temperature in the zone in Celsius"
          },
          "heating_power": {
            "type": "number",
            "format": "double",
            "description": "Heating power"
          },
          "target_temperature": {
            "type": "number",
            "format": "double",
            "description": "Target temperature set for the zone in Celsius"
          }
        }
      },
      "Time": {
        "type": "object",
        "required": [
          "time"
        ],
        "properties": {
          "time": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      },
      "TimeShifterEntityParams": {
        "type": "object",
        "required": [
          "name",
          "profile",
          "timeBase"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "profile": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalComplex"
            }
          },
          "timeBase": {
            "type": "integer",
            "format": "int64",
            "minimum": 0
          }
        }
      }
    }
  }
}